{
    "contents" : "library(shiny)\nlibrary(xts)\nlibrary(knitr)\nsource(\"Reliability.R\")\n\nshinyServer(function(input, output) {\n   \n    impX <- function(){as.numeric(input$x)}\n    impP <- function(){as.numeric(input$p)}\n    impR <- function(){as.numeric(input$r)}\n    impI <- function(){as.numeric(input$pil)}\n    \n    impmusaP <- function(){as.numeric(input$musaP)}\n    impduaneP <- function(){as.numeric(input$duaneP)}\n    implvP <- function(){as.numeric(input$lvP)}\n    impokumotoP <- function(){as.numeric(input$okumotoP)}\n    impgeoP <- function(){as.numeric(input$geoP)}\n    impjmP <- function(){as.numeric(input$jmP)}\n    \n    impT <- function(){   \n      inFile <- input$file\n      if (is.null(inFile))\n        return(NULL)\n      data <- read.csv(inFile$datapath, header=FALSE, sep=\",\")\n      data <- as.numeric(data)\n      return(data)\n    }\n  \n    \n    output$total_plot <- renderPlot({\n      \n      inFile <- input$file\n      if (is.null(inFile))\n        return(NULL)\n      t <- impT()\n      musa.basic.par3 <- impX()\n      jelinski.moranda.par3 <- impP()\n      jelinski.moranda.par4 <- impR()\n      \n      duane.par1 <- duane(t)$rho\n      duane.par2 <- duane(t)$theta\n      \n      lit.par1 <- littlewood.verall(t, linear = T)$theta0\n      lit.par2 <- littlewood.verall(t, linear = T)$theta1\n      lit.par3 <- littlewood.verall(t, linear = T)$rho\n      \n      mor.par1 <- moranda.geometric(t)$D\n      mor.par2 <- moranda.geometric(t)$theta\n      \n      musa.par1 <- musa.okumoto(t)$theta0\n      musa.par2 <- musa.okumoto(t)$theta1\n      \n      musa.basic.par1 <- musa.basic(t,musa.basic.par3)$beta0\n      musa.basic.par2 <- musa.basic(t,musa.basic.par3)$beta1\n      \n      jelinski.moranda.par1 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$N0\n      jelinski.moranda.par2 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$phi\n      \n      total.plot(jelinski.moranda.par1, jelinski.moranda.par2, jelinski.moranda.par3, jelinski.moranda.par4,\n                 musa.basic.par1, musa.basic.par2,duane.par1, duane.par2, lit.par1, lit.par2, lit.par3, mor.par1,\n                 mor.par2, musa.par1, musa.par2, t, linear = T, xlab = \"Time \", main = \"All models\")\n    })\n    \n    output$rel_plot <- renderPlot({\n       \n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       t <- impT()\n       musa.basic.par3 <- impX()\n       jelinski.moranda.par3 <- impP()\n       jelinski.moranda.par4 <- impR()\n       \n       duane.par1 <- duane(t)$rho\n       duane.par2 <- duane(t)$theta\n       \n       lit.par1 <- littlewood.verall(t, linear = T)$theta0\n       lit.par2 <- littlewood.verall(t, linear = T)$theta1\n       lit.par3 <- littlewood.verall(t, linear = T)$rho\n       \n       mor.par1 <- moranda.geometric(t)$D\n       mor.par2 <- moranda.geometric(t)$theta\n       \n       musa.par1 <- musa.okumoto(t)$theta0\n       musa.par2 <- musa.okumoto(t)$theta1\n       \n       musa.basic.par1 <- musa.basic(t,musa.basic.par3)$beta0\n       musa.basic.par2 <- musa.basic(t,musa.basic.par3)$beta1\n       \n       jelinski.moranda.par1 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$N0\n       jelinski.moranda.par2 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$phi\n       \n       rel.plot(jelinski.moranda.par1, jelinski.moranda.par2, jelinski.moranda.par3, \n                jelinski.moranda.par4,\n                musa.basic.par1, musa.basic.par2,\n                duane.par1, duane.par2,\n                lit.par1, lit.par2, lit.par3,\n                mor.par1, mor.par2,\n                musa.par1, musa.par2,\n                t, linear = T, ymin = -1,\n                ymax = 2.5, xlab = \"Time\", main = \"Relative error\")\n    })\n    \n    output$rank <- renderDataTable({\n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       t <- impT()\n       musa.basic.par3 <- impX()\n       jelinski.moranda.par3 <- impP()\n       jelinski.moranda.par4 <- impR()\n       \n       duane.par1 <- duane(t)$rho\n       duane.par2 <- duane(t)$theta\n       \n       lit.par1 <- littlewood.verall(t, linear = T)$theta0\n       lit.par2 <- littlewood.verall(t, linear = T)$theta1\n       lit.par3 <- littlewood.verall(t, linear = T)$rho\n       \n       mor.par1 <- moranda.geometric(t)$D\n       mor.par2 <- moranda.geometric(t)$theta\n       \n       musa.par1 <- musa.okumoto(t)$theta0\n       musa.par2 <- musa.okumoto(t)$theta1\n       \n       musa.basic.par1 <- musa.basic(t,musa.basic.par3)$beta0\n       musa.basic.par2 <- musa.basic(t,musa.basic.par3)$beta1\n       \n       jelinski.moranda.par1 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$N0\n       jelinski.moranda.par2 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$phi\n       \n       return(rank.rel(jelinski.moranda.par1, jelinski.moranda.par2, jelinski.moranda.par3, \n                          jelinski.moranda.par4,\n                          musa.basic.par1, musa.basic.par2, duane.par1, duane.par2, lit.par1, \n                          lit.par2, lit.par3, mor.par1,\n                          mor.par2, musa.par1, musa.par2, t, linear = T))\n    }, options = list(pageLength = 10))\n    \n    output$pred_plot <- renderPlot({\n       \n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       t <- impT()\n       musa.basic.par3 <- impX()\n       jelinski.moranda.par3 <- impP()\n       jelinski.moranda.par4 <- impR()\n       \n       duane.par1 <- duane(t)$rho\n       duane.par2 <- duane(t)$theta\n       \n       lit.par1 <- littlewood.verall(t, linear = T)$theta0\n       lit.par2 <- littlewood.verall(t, linear = T)$theta1\n       lit.par3 <- littlewood.verall(t, linear = T)$rho\n       \n       mor.par1 <- moranda.geometric(t)$D\n       mor.par2 <- moranda.geometric(t)$theta\n       \n       musa.par1 <- musa.okumoto(t)$theta0\n       musa.par2 <- musa.okumoto(t)$theta1\n       \n       musa.basic.par1 <- musa.basic(t,musa.basic.par3)$beta0\n       musa.basic.par2 <- musa.basic(t,musa.basic.par3)$beta1\n       \n       jelinski.moranda.par1 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$N0\n       jelinski.moranda.par2 <- jelisnki.moranda(t, jelinski.moranda.par3, jelinski.moranda.par4)$phi\n\n       t_aux <- cumsum(t)\n       tmax <- t_aux[length(t)]\n       interval <- impI()\n       new_t <- tmax + 0:interval\n       \n       musaP <- impmusaP()\n       duaneP <- impduaneP()\n       lvP <- implvP()\n       okumotoP <- impokumotoP()\n       geoP <- impgeoP()\n       jmP <- impjmP()\n       \n       prediction.plot(musaP, duaneP, lvP, okumotoP, geoP, jmP,\n                       jelinski.moranda.par1, jelinski.moranda.par2, jelinski.moranda.par3, jelinski.moranda.par4,\n                       musa.basic.par1, musa.basic.par2,duane.par1, duane.par2, lit.par1, lit.par2, lit.par3, mor.par1,\n                       mor.par2, musa.par1, musa.par2, rep(1,interval), linear = T, xlab = \"Time \", main = \"All models\")\n    })\n    \n    \n    output$Time_series <- renderPlot({\n    \n       require(tseries)\n       require(forecast)\n       \n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       dataT <- read.csv(inFile$datapath, header=FALSE, sep=\",\")\n       dataT <- t(dataT)\n       \n       # plot(dataT)\n       \n       dataTlog <- log(dataT + 1)\n       modelo <- Arima(dataTlog,c(7,0,7))\n       \n       #-------------------------------------------\n       plot(dataT,type=\"l\",xlab=\"Time\",ylab=\"\",xlim = c(0,length(dataT)+input$prediccion+1),ylim=c(0,16000))\n       lines(exp(fitted(modelo)),col=\"red\")\n       \n       prediccion <- predict(modelo,input$prediccion)\n       lines(exp(prediccion$pred),type=\"o\")\n       lines(exp(prediccion$pred-prediccion$se),col=\"blue\",type=\"o\")\n       lines(exp(prediccion$pred+prediccion$se),col=\"blue\",type=\"o\")\n       \n       \n   })\n    \n    output$Time_series2 <- renderDygraph({\n       \n       require(tseries)\n       require(forecast)\n       \n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       dataT <- read.csv(inFile$datapath, header=FALSE, sep=\",\")\n       dataT <- t(dataT)\n       \n       # plot(dataT)\n       \n       dataTlog <- log(dataT + 1)\n       modelo <- Arima(dataTlog,c(7,0,7))\n       #-------------------------------------------\n       prediccion <- predict(modelo,input$prediccion)\n       \n       \n       dPrediccion <- data.frame(LowLimit = exp(prediccion$pred-prediccion$se),\n                                 Prediction = exp(prediccion$pred),\n                                 UpperLimit = exp(prediccion$pred+prediccion$se))\n       \n       nas <- matrix(rep(NA,length(dataT)*3),ncol=3)\n       colnames(nas) <- names(dPrediccion)\n       dataT2 <- rbind(nas,dPrediccion)\n       \n       nas2 <- matrix(rep(NA,length(prediccion$pred)),ncol=1)\n       colnames(nas2) <- names(dataT)\n       dataT3 <- rbind(dataT,nas2)\n       \n       dataFinal <- cbind(Historic = dataT3,dataT2)\n       Tiempo= as.Date(1:length(dataT3))\n       \n       dataFinal<-xts(dataFinal, order.by = Tiempo)\n       \n       dygraph(dataFinal, \"Tecnology Failtures\") %>%\n          dySeries(\"Historic\", label = \"Actual\") %>%\n          dySeries(c(\"LowLimit\", \"Prediction\", \"UpperLimit\"), label = \"Predicted\")\n       \n       \n    })\n\n    \n    # the values\n    sliderValues <- reactive({\n       \n       \n       require(tseries)\n       require(forecast)\n       \n       inFile <- input$file\n       if (is.null(inFile))\n          return(NULL)\n       dataT <- read.csv(inFile$datapath, header=FALSE, sep=\",\")\n       dataT <- t(dataT)\n       \n       # plot(dataT)\n       \n       dataTlog <- log(dataT + 1)\n       modelo <- Arima(dataTlog,c(7,0,7))\n       #-------------------------------------------\n       prediccion <- predict(modelo,input$prediccion)\n       \n       \n       res <- data.frame(LowLimit = exp(prediccion$pred-prediccion$se),\n                  Prediction = exp(prediccion$pred),\n                  UpperLimit = exp(prediccion$pred+prediccion$se))\n       #kable(res,format = \"html\" )\n    }) \n    \n    # Show the values using an HTML table\n    output$Prediction_values <- renderTable({\n       sliderValues()\n    })\n    \n  }\n)\n",
    "created" : 1457644010954.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3031946922",
    "id" : "F2300F24",
    "lastKnownWriteTime" : 1463690402,
    "path" : "C:/Users/aveleze/Desktop/Papadopulus Pispis/Proyecto-shiny-Eafit/Shiny-Eafit/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}